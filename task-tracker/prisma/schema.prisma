// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // App-specific
  role          Role      @default(USER)
  tasks         Task[]

  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

// Encrypted Task payload fields use AES-GCM (ciphertext + iv + authTag)
model Task {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?

  status          TaskStatus @default(OPEN)
  priority        TaskPriority @default(NORMAL)

  // Ownership
  createdById     String
  createdBy       User      @relation(fields: [createdById], references: [id], onDelete: Cascade)

  // Encrypted fields
  titleCiphertext String
  titleIv         String
  titleAuthTag    String

  bodyCiphertext  String?
  bodyIv          String?
  bodyAuthTag     String?

  subtasksCiphertext String?
  subtasksIv         String?
  subtasksAuthTag    String?

  // Indexes to support typical sorting/filtering
  @@index([createdById])
  @@index([priority, createdAt])
  @@index([status, createdAt])
}

enum TaskStatus {
  OPEN
  COMPLETED
}

enum TaskPriority {
  URGENT
  NORMAL
}
